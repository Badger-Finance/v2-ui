/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface RenSwapInterface extends ethers.utils.Interface {
	functions: {
		'A()': FunctionFragment;
		'get_virtual_price()': FunctionFragment;
		'calc_token_amount(uint256[2],bool)': FunctionFragment;
		'add_liquidity(uint256[2],uint256)': FunctionFragment;
		'get_dy(int128,int128,uint256)': FunctionFragment;
		'get_dy_underlying(int128,int128,uint256)': FunctionFragment;
		'exchange(int128,int128,uint256,uint256)': FunctionFragment;
		'remove_liquidity(uint256,uint256[2])': FunctionFragment;
		'remove_liquidity_imbalance(uint256[2],uint256)': FunctionFragment;
		'calc_withdraw_one_coin(uint256,int128)': FunctionFragment;
		'remove_liquidity_one_coin(uint256,int128,uint256)': FunctionFragment;
		'ramp_A(uint256,uint256)': FunctionFragment;
		'stop_ramp_A()': FunctionFragment;
		'commit_new_fee(uint256,uint256)': FunctionFragment;
		'apply_new_fee()': FunctionFragment;
		'revert_new_parameters()': FunctionFragment;
		'commit_transfer_ownership(address)': FunctionFragment;
		'apply_transfer_ownership()': FunctionFragment;
		'revert_transfer_ownership()': FunctionFragment;
		'withdraw_admin_fees()': FunctionFragment;
		'kill_me()': FunctionFragment;
		'unkill_me()': FunctionFragment;
		'coins(int128)': FunctionFragment;
		'balances(int128)': FunctionFragment;
		'fee()': FunctionFragment;
		'admin_fee()': FunctionFragment;
		'owner()': FunctionFragment;
		'initial_A()': FunctionFragment;
		'future_A()': FunctionFragment;
		'initial_A_time()': FunctionFragment;
		'future_A_time()': FunctionFragment;
		'admin_actions_deadline()': FunctionFragment;
		'transfer_ownership_deadline()': FunctionFragment;
		'future_fee()': FunctionFragment;
		'future_admin_fee()': FunctionFragment;
		'future_owner()': FunctionFragment;
	};

	encodeFunctionData(functionFragment: 'A', values?: undefined): string;
	encodeFunctionData(functionFragment: 'get_virtual_price', values?: undefined): string;
	encodeFunctionData(functionFragment: 'calc_token_amount', values: [[BigNumberish, BigNumberish], boolean]): string;
	encodeFunctionData(functionFragment: 'add_liquidity', values: [[BigNumberish, BigNumberish], BigNumberish]): string;
	encodeFunctionData(functionFragment: 'get_dy', values: [BigNumberish, BigNumberish, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'get_dy_underlying',
		values: [BigNumberish, BigNumberish, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: 'exchange',
		values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
	): string;
	encodeFunctionData(
		functionFragment: 'remove_liquidity',
		values: [BigNumberish, [BigNumberish, BigNumberish]],
	): string;
	encodeFunctionData(
		functionFragment: 'remove_liquidity_imbalance',
		values: [[BigNumberish, BigNumberish], BigNumberish],
	): string;
	encodeFunctionData(functionFragment: 'calc_withdraw_one_coin', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'remove_liquidity_one_coin',
		values: [BigNumberish, BigNumberish, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: 'ramp_A', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'stop_ramp_A', values?: undefined): string;
	encodeFunctionData(functionFragment: 'commit_new_fee', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'apply_new_fee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'revert_new_parameters', values?: undefined): string;
	encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [string]): string;
	encodeFunctionData(functionFragment: 'apply_transfer_ownership', values?: undefined): string;
	encodeFunctionData(functionFragment: 'revert_transfer_ownership', values?: undefined): string;
	encodeFunctionData(functionFragment: 'withdraw_admin_fees', values?: undefined): string;
	encodeFunctionData(functionFragment: 'kill_me', values?: undefined): string;
	encodeFunctionData(functionFragment: 'unkill_me', values?: undefined): string;
	encodeFunctionData(functionFragment: 'coins', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'balances', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'admin_fee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'initial_A', values?: undefined): string;
	encodeFunctionData(functionFragment: 'future_A', values?: undefined): string;
	encodeFunctionData(functionFragment: 'initial_A_time', values?: undefined): string;
	encodeFunctionData(functionFragment: 'future_A_time', values?: undefined): string;
	encodeFunctionData(functionFragment: 'admin_actions_deadline', values?: undefined): string;
	encodeFunctionData(functionFragment: 'transfer_ownership_deadline', values?: undefined): string;
	encodeFunctionData(functionFragment: 'future_fee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'future_admin_fee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'future_owner', values?: undefined): string;

	decodeFunctionResult(functionFragment: 'A', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'get_virtual_price', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'calc_token_amount', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'add_liquidity', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'get_dy', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'get_dy_underlying', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'exchange', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'remove_liquidity', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'remove_liquidity_imbalance', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'calc_withdraw_one_coin', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'remove_liquidity_one_coin', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'ramp_A', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'stop_ramp_A', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'commit_new_fee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'apply_new_fee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'revert_new_parameters', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'apply_transfer_ownership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'revert_transfer_ownership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'withdraw_admin_fees', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'kill_me', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'unkill_me', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'coins', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'admin_fee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initial_A', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'future_A', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initial_A_time', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'future_A_time', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'admin_actions_deadline', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transfer_ownership_deadline', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'future_fee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'future_admin_fee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'future_owner', data: BytesLike): Result;

	events: {
		'TokenExchange(address,int128,uint256,int128,uint256)': EventFragment;
		'AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)': EventFragment;
		'RemoveLiquidity(address,uint256[2],uint256[2],uint256)': EventFragment;
		'RemoveLiquidityOne(address,uint256,uint256)': EventFragment;
		'RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)': EventFragment;
		'CommitNewAdmin(uint256,address)': EventFragment;
		'NewAdmin(address)': EventFragment;
		'CommitNewFee(uint256,uint256,uint256)': EventFragment;
		'NewFee(uint256,uint256)': EventFragment;
		'RampA(uint256,uint256,uint256,uint256)': EventFragment;
		'StopRampA(uint256,uint256)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'TokenExchange'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'AddLiquidity'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RemoveLiquidity'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RemoveLiquidityOne'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RemoveLiquidityImbalance'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'CommitNewAdmin'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'NewAdmin'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'CommitNewFee'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'NewFee'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'RampA'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'StopRampA'): EventFragment;
}

export type TokenExchangeEvent = TypedEvent<
	[string, BigNumber, BigNumber, BigNumber, BigNumber] & {
		buyer: string;
		sold_id: BigNumber;
		tokens_sold: BigNumber;
		bought_id: BigNumber;
		tokens_bought: BigNumber;
	}
>;

export type AddLiquidityEvent = TypedEvent<
	[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber, BigNumber] & {
		provider: string;
		token_amounts: [BigNumber, BigNumber];
		fees: [BigNumber, BigNumber];
		invariant: BigNumber;
		token_supply: BigNumber;
	}
>;

export type RemoveLiquidityEvent = TypedEvent<
	[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber] & {
		provider: string;
		token_amounts: [BigNumber, BigNumber];
		fees: [BigNumber, BigNumber];
		token_supply: BigNumber;
	}
>;

export type RemoveLiquidityOneEvent = TypedEvent<
	[string, BigNumber, BigNumber] & {
		provider: string;
		token_amount: BigNumber;
		coin_amount: BigNumber;
	}
>;

export type RemoveLiquidityImbalanceEvent = TypedEvent<
	[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber, BigNumber] & {
		provider: string;
		token_amounts: [BigNumber, BigNumber];
		fees: [BigNumber, BigNumber];
		invariant: BigNumber;
		token_supply: BigNumber;
	}
>;

export type CommitNewAdminEvent = TypedEvent<[BigNumber, string] & { deadline: BigNumber; admin: string }>;

export type NewAdminEvent = TypedEvent<[string] & { admin: string }>;

export type CommitNewFeeEvent = TypedEvent<
	[BigNumber, BigNumber, BigNumber] & {
		deadline: BigNumber;
		fee: BigNumber;
		admin_fee: BigNumber;
	}
>;

export type NewFeeEvent = TypedEvent<[BigNumber, BigNumber] & { fee: BigNumber; admin_fee: BigNumber }>;

export type RampAEvent = TypedEvent<
	[BigNumber, BigNumber, BigNumber, BigNumber] & {
		old_A: BigNumber;
		new_A: BigNumber;
		initial_time: BigNumber;
		future_time: BigNumber;
	}
>;

export type StopRampAEvent = TypedEvent<[BigNumber, BigNumber] & { A: BigNumber; t: BigNumber }>;

export class RenSwap extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: RenSwapInterface;

	functions: {
		A(overrides?: CallOverrides): Promise<[BigNumber]>;

		get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

		calc_token_amount(
			amounts: [BigNumberish, BigNumberish],
			deposit: boolean,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		add_liquidity(
			amounts: [BigNumberish, BigNumberish],
			min_mint_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		get_dy(i: BigNumberish, j: BigNumberish, dx: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

		get_dy_underlying(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		exchange(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			min_dy: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		remove_liquidity(
			_amount: BigNumberish,
			min_amounts: [BigNumberish, BigNumberish],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		remove_liquidity_imbalance(
			amounts: [BigNumberish, BigNumberish],
			max_burn_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		calc_withdraw_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		remove_liquidity_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			min_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		ramp_A(
			_future_A: BigNumberish,
			_future_time: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		stop_ramp_A(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		commit_new_fee(
			new_fee: BigNumberish,
			new_admin_fee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		apply_new_fee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		revert_new_parameters(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		commit_transfer_ownership(
			_owner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		apply_transfer_ownership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		revert_transfer_ownership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		withdraw_admin_fees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		kill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		unkill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

		balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

		fee(overrides?: CallOverrides): Promise<[BigNumber]>;

		admin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		initial_A(overrides?: CallOverrides): Promise<[BigNumber]>;

		future_A(overrides?: CallOverrides): Promise<[BigNumber]>;

		initial_A_time(overrides?: CallOverrides): Promise<[BigNumber]>;

		future_A_time(overrides?: CallOverrides): Promise<[BigNumber]>;

		admin_actions_deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

		transfer_ownership_deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

		future_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

		future_admin_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

		future_owner(overrides?: CallOverrides): Promise<[string]>;
	};

	A(overrides?: CallOverrides): Promise<BigNumber>;

	get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

	calc_token_amount(
		amounts: [BigNumberish, BigNumberish],
		deposit: boolean,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	add_liquidity(
		amounts: [BigNumberish, BigNumberish],
		min_mint_amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	get_dy(i: BigNumberish, j: BigNumberish, dx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	get_dy_underlying(
		i: BigNumberish,
		j: BigNumberish,
		dx: BigNumberish,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	exchange(
		i: BigNumberish,
		j: BigNumberish,
		dx: BigNumberish,
		min_dy: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	remove_liquidity(
		_amount: BigNumberish,
		min_amounts: [BigNumberish, BigNumberish],
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	remove_liquidity_imbalance(
		amounts: [BigNumberish, BigNumberish],
		max_burn_amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	calc_withdraw_one_coin(_token_amount: BigNumberish, i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	remove_liquidity_one_coin(
		_token_amount: BigNumberish,
		i: BigNumberish,
		min_amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	ramp_A(
		_future_A: BigNumberish,
		_future_time: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	stop_ramp_A(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	commit_new_fee(
		new_fee: BigNumberish,
		new_admin_fee: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	apply_new_fee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	revert_new_parameters(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	commit_transfer_ownership(
		_owner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	apply_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	revert_transfer_ownership(
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	withdraw_admin_fees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	kill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	unkill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

	balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	fee(overrides?: CallOverrides): Promise<BigNumber>;

	admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

	owner(overrides?: CallOverrides): Promise<string>;

	initial_A(overrides?: CallOverrides): Promise<BigNumber>;

	future_A(overrides?: CallOverrides): Promise<BigNumber>;

	initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

	future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

	admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

	transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

	future_fee(overrides?: CallOverrides): Promise<BigNumber>;

	future_admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

	future_owner(overrides?: CallOverrides): Promise<string>;

	callStatic: {
		A(overrides?: CallOverrides): Promise<BigNumber>;

		get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

		calc_token_amount(
			amounts: [BigNumberish, BigNumberish],
			deposit: boolean,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		add_liquidity(
			amounts: [BigNumberish, BigNumberish],
			min_mint_amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		get_dy(i: BigNumberish, j: BigNumberish, dx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		get_dy_underlying(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		exchange(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			min_dy: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		remove_liquidity(
			_amount: BigNumberish,
			min_amounts: [BigNumberish, BigNumberish],
			overrides?: CallOverrides,
		): Promise<void>;

		remove_liquidity_imbalance(
			amounts: [BigNumberish, BigNumberish],
			max_burn_amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		calc_withdraw_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		remove_liquidity_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			min_amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		ramp_A(_future_A: BigNumberish, _future_time: BigNumberish, overrides?: CallOverrides): Promise<void>;

		stop_ramp_A(overrides?: CallOverrides): Promise<void>;

		commit_new_fee(new_fee: BigNumberish, new_admin_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

		apply_new_fee(overrides?: CallOverrides): Promise<void>;

		revert_new_parameters(overrides?: CallOverrides): Promise<void>;

		commit_transfer_ownership(_owner: string, overrides?: CallOverrides): Promise<void>;

		apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

		revert_transfer_ownership(overrides?: CallOverrides): Promise<void>;

		withdraw_admin_fees(overrides?: CallOverrides): Promise<void>;

		kill_me(overrides?: CallOverrides): Promise<void>;

		unkill_me(overrides?: CallOverrides): Promise<void>;

		coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

		balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		fee(overrides?: CallOverrides): Promise<BigNumber>;

		admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<string>;

		initial_A(overrides?: CallOverrides): Promise<BigNumber>;

		future_A(overrides?: CallOverrides): Promise<BigNumber>;

		initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

		future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

		admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

		transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

		future_fee(overrides?: CallOverrides): Promise<BigNumber>;

		future_admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

		future_owner(overrides?: CallOverrides): Promise<string>;
	};

	filters: {
		'TokenExchange(address,int128,uint256,int128,uint256)'(
			buyer?: string | null,
			sold_id?: null,
			tokens_sold?: null,
			bought_id?: null,
			tokens_bought?: null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber, BigNumber, BigNumber],
			{
				buyer: string;
				sold_id: BigNumber;
				tokens_sold: BigNumber;
				bought_id: BigNumber;
				tokens_bought: BigNumber;
			}
		>;

		TokenExchange(
			buyer?: string | null,
			sold_id?: null,
			tokens_sold?: null,
			bought_id?: null,
			tokens_bought?: null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber, BigNumber, BigNumber],
			{
				buyer: string;
				sold_id: BigNumber;
				tokens_sold: BigNumber;
				bought_id: BigNumber;
				tokens_bought: BigNumber;
			}
		>;

		'AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)'(
			provider?: string | null,
			token_amounts?: null,
			fees?: null,
			invariant?: null,
			token_supply?: null,
		): TypedEventFilter<
			[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber, BigNumber],
			{
				provider: string;
				token_amounts: [BigNumber, BigNumber];
				fees: [BigNumber, BigNumber];
				invariant: BigNumber;
				token_supply: BigNumber;
			}
		>;

		AddLiquidity(
			provider?: string | null,
			token_amounts?: null,
			fees?: null,
			invariant?: null,
			token_supply?: null,
		): TypedEventFilter<
			[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber, BigNumber],
			{
				provider: string;
				token_amounts: [BigNumber, BigNumber];
				fees: [BigNumber, BigNumber];
				invariant: BigNumber;
				token_supply: BigNumber;
			}
		>;

		'RemoveLiquidity(address,uint256[2],uint256[2],uint256)'(
			provider?: string | null,
			token_amounts?: null,
			fees?: null,
			token_supply?: null,
		): TypedEventFilter<
			[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber],
			{
				provider: string;
				token_amounts: [BigNumber, BigNumber];
				fees: [BigNumber, BigNumber];
				token_supply: BigNumber;
			}
		>;

		RemoveLiquidity(
			provider?: string | null,
			token_amounts?: null,
			fees?: null,
			token_supply?: null,
		): TypedEventFilter<
			[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber],
			{
				provider: string;
				token_amounts: [BigNumber, BigNumber];
				fees: [BigNumber, BigNumber];
				token_supply: BigNumber;
			}
		>;

		'RemoveLiquidityOne(address,uint256,uint256)'(
			provider?: string | null,
			token_amount?: null,
			coin_amount?: null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber],
			{ provider: string; token_amount: BigNumber; coin_amount: BigNumber }
		>;

		RemoveLiquidityOne(
			provider?: string | null,
			token_amount?: null,
			coin_amount?: null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber],
			{ provider: string; token_amount: BigNumber; coin_amount: BigNumber }
		>;

		'RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)'(
			provider?: string | null,
			token_amounts?: null,
			fees?: null,
			invariant?: null,
			token_supply?: null,
		): TypedEventFilter<
			[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber, BigNumber],
			{
				provider: string;
				token_amounts: [BigNumber, BigNumber];
				fees: [BigNumber, BigNumber];
				invariant: BigNumber;
				token_supply: BigNumber;
			}
		>;

		RemoveLiquidityImbalance(
			provider?: string | null,
			token_amounts?: null,
			fees?: null,
			invariant?: null,
			token_supply?: null,
		): TypedEventFilter<
			[string, [BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber, BigNumber],
			{
				provider: string;
				token_amounts: [BigNumber, BigNumber];
				fees: [BigNumber, BigNumber];
				invariant: BigNumber;
				token_supply: BigNumber;
			}
		>;

		'CommitNewAdmin(uint256,address)'(
			deadline?: BigNumberish | null,
			admin?: string | null,
		): TypedEventFilter<[BigNumber, string], { deadline: BigNumber; admin: string }>;

		CommitNewAdmin(
			deadline?: BigNumberish | null,
			admin?: string | null,
		): TypedEventFilter<[BigNumber, string], { deadline: BigNumber; admin: string }>;

		'NewAdmin(address)'(admin?: string | null): TypedEventFilter<[string], { admin: string }>;

		NewAdmin(admin?: string | null): TypedEventFilter<[string], { admin: string }>;

		'CommitNewFee(uint256,uint256,uint256)'(
			deadline?: BigNumberish | null,
			fee?: null,
			admin_fee?: null,
		): TypedEventFilter<
			[BigNumber, BigNumber, BigNumber],
			{ deadline: BigNumber; fee: BigNumber; admin_fee: BigNumber }
		>;

		CommitNewFee(
			deadline?: BigNumberish | null,
			fee?: null,
			admin_fee?: null,
		): TypedEventFilter<
			[BigNumber, BigNumber, BigNumber],
			{ deadline: BigNumber; fee: BigNumber; admin_fee: BigNumber }
		>;

		'NewFee(uint256,uint256)'(
			fee?: null,
			admin_fee?: null,
		): TypedEventFilter<[BigNumber, BigNumber], { fee: BigNumber; admin_fee: BigNumber }>;

		NewFee(
			fee?: null,
			admin_fee?: null,
		): TypedEventFilter<[BigNumber, BigNumber], { fee: BigNumber; admin_fee: BigNumber }>;

		'RampA(uint256,uint256,uint256,uint256)'(
			old_A?: null,
			new_A?: null,
			initial_time?: null,
			future_time?: null,
		): TypedEventFilter<
			[BigNumber, BigNumber, BigNumber, BigNumber],
			{
				old_A: BigNumber;
				new_A: BigNumber;
				initial_time: BigNumber;
				future_time: BigNumber;
			}
		>;

		RampA(
			old_A?: null,
			new_A?: null,
			initial_time?: null,
			future_time?: null,
		): TypedEventFilter<
			[BigNumber, BigNumber, BigNumber, BigNumber],
			{
				old_A: BigNumber;
				new_A: BigNumber;
				initial_time: BigNumber;
				future_time: BigNumber;
			}
		>;

		'StopRampA(uint256,uint256)'(
			A?: null,
			t?: null,
		): TypedEventFilter<[BigNumber, BigNumber], { A: BigNumber; t: BigNumber }>;

		StopRampA(A?: null, t?: null): TypedEventFilter<[BigNumber, BigNumber], { A: BigNumber; t: BigNumber }>;
	};

	estimateGas: {
		A(overrides?: CallOverrides): Promise<BigNumber>;

		get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

		calc_token_amount(
			amounts: [BigNumberish, BigNumberish],
			deposit: boolean,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		add_liquidity(
			amounts: [BigNumberish, BigNumberish],
			min_mint_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		get_dy(i: BigNumberish, j: BigNumberish, dx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		get_dy_underlying(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		exchange(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			min_dy: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		remove_liquidity(
			_amount: BigNumberish,
			min_amounts: [BigNumberish, BigNumberish],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		remove_liquidity_imbalance(
			amounts: [BigNumberish, BigNumberish],
			max_burn_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		calc_withdraw_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		remove_liquidity_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			min_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		ramp_A(
			_future_A: BigNumberish,
			_future_time: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		stop_ramp_A(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		commit_new_fee(
			new_fee: BigNumberish,
			new_admin_fee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		apply_new_fee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		revert_new_parameters(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		commit_transfer_ownership(
			_owner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		apply_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		revert_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		withdraw_admin_fees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		kill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		unkill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		fee(overrides?: CallOverrides): Promise<BigNumber>;

		admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		initial_A(overrides?: CallOverrides): Promise<BigNumber>;

		future_A(overrides?: CallOverrides): Promise<BigNumber>;

		initial_A_time(overrides?: CallOverrides): Promise<BigNumber>;

		future_A_time(overrides?: CallOverrides): Promise<BigNumber>;

		admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

		transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

		future_fee(overrides?: CallOverrides): Promise<BigNumber>;

		future_admin_fee(overrides?: CallOverrides): Promise<BigNumber>;

		future_owner(overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		calc_token_amount(
			amounts: [BigNumberish, BigNumberish],
			deposit: boolean,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		add_liquidity(
			amounts: [BigNumberish, BigNumberish],
			min_mint_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		get_dy(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		get_dy_underlying(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		exchange(
			i: BigNumberish,
			j: BigNumberish,
			dx: BigNumberish,
			min_dy: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		remove_liquidity(
			_amount: BigNumberish,
			min_amounts: [BigNumberish, BigNumberish],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		remove_liquidity_imbalance(
			amounts: [BigNumberish, BigNumberish],
			max_burn_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		calc_withdraw_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		remove_liquidity_one_coin(
			_token_amount: BigNumberish,
			i: BigNumberish,
			min_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		ramp_A(
			_future_A: BigNumberish,
			_future_time: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		stop_ramp_A(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		commit_new_fee(
			new_fee: BigNumberish,
			new_admin_fee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		apply_new_fee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		revert_new_parameters(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		commit_transfer_ownership(
			_owner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		apply_transfer_ownership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		revert_transfer_ownership(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		withdraw_admin_fees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		kill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		unkill_me(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		coins(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		admin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		initial_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		future_A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		initial_A_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		future_A_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		admin_actions_deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transfer_ownership_deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		future_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		future_admin_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		future_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
	};
}
