/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ZapPeakInterface extends ethers.utils.Interface {
	functions: {
		'approveContractAccess(address)': FunctionFragment;
		'approved(address)': FunctionFragment;
		'blockLock(address)': FunctionFragment;
		'byvWbtcPeak()': FunctionFragment;
		'calcMint(address,uint256)': FunctionFragment;
		'calcMintWithRen(uint256)': FunctionFragment;
		'calcMintWithWbtc(uint256)': FunctionFragment;
		'curveLPToIbbtc(uint256,uint256)': FunctionFragment;
		'ibbtc()': FunctionFragment;
		'mint(address,uint256,uint256,uint256,uint256)': FunctionFragment;
		'owner()': FunctionFragment;
		'pools(uint256)': FunctionFragment;
		'ren()': FunctionFragment;
		'revokeContractAccess(address)': FunctionFragment;
		'settPeak()': FunctionFragment;
		'transferOwnership(address)': FunctionFragment;
		'wbtc()': FunctionFragment;
	};

	encodeFunctionData(functionFragment: 'approveContractAccess', values: [string]): string;
	encodeFunctionData(functionFragment: 'approved', values: [string]): string;
	encodeFunctionData(functionFragment: 'blockLock', values: [string]): string;
	encodeFunctionData(functionFragment: 'byvWbtcPeak', values?: undefined): string;
	encodeFunctionData(functionFragment: 'calcMint', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'calcMintWithRen', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'calcMintWithWbtc', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'curveLPToIbbtc', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'ibbtc', values?: undefined): string;
	encodeFunctionData(
		functionFragment: 'mint',
		values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'pools', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'ren', values?: undefined): string;
	encodeFunctionData(functionFragment: 'revokeContractAccess', values: [string]): string;
	encodeFunctionData(functionFragment: 'settPeak', values?: undefined): string;
	encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
	encodeFunctionData(functionFragment: 'wbtc', values?: undefined): string;

	decodeFunctionResult(functionFragment: 'approveContractAccess', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'approved', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'blockLock', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'byvWbtcPeak', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'calcMint', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'calcMintWithRen', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'calcMintWithWbtc', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'curveLPToIbbtc', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'ibbtc', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'ren', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'revokeContractAccess', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'settPeak', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'wbtc', data: BytesLike): Result;

	events: {
		'OwnershipTransferred(address,address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export class ZapPeak extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: ZapPeakInterface;

	functions: {
		approveContractAccess(
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		approved(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

		blockLock(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		byvWbtcPeak(overrides?: CallOverrides): Promise<[string]>;

		calcMint(
			token: string,
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber] & {
				poolId: BigNumber;
				idx: BigNumber;
				bBTC: BigNumber;
				fee: BigNumber;
			}
		>;

		calcMintWithRen(
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber] & {
				poolId: BigNumber;
				idx: BigNumber;
				bBTC: BigNumber;
				fee: BigNumber;
			}
		>;

		calcMintWithWbtc(
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber] & {
				poolId: BigNumber;
				idx: BigNumber;
				bBTC: BigNumber;
				fee: BigNumber;
			}
		>;

		curveLPToIbbtc(
			poolId: BigNumberish,
			_lp: BigNumberish,
			overrides?: CallOverrides,
		): Promise<[BigNumber, BigNumber] & { bBTC: BigNumber; fee: BigNumber }>;

		ibbtc(overrides?: CallOverrides): Promise<[string]>;

		mint(
			token: string,
			amount: BigNumberish,
			poolId: BigNumberish,
			idx: BigNumberish,
			minOut: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		owner(overrides?: CallOverrides): Promise<[string] & { _owner: string }>;

		pools(
			arg0: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[string, string, string] & {
				lpToken: string;
				deposit: string;
				sett: string;
			}
		>;

		ren(overrides?: CallOverrides): Promise<[string]>;

		revokeContractAccess(
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		settPeak(overrides?: CallOverrides): Promise<[string]>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		wbtc(overrides?: CallOverrides): Promise<[string]>;
	};

	approveContractAccess(
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	approved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

	blockLock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

	byvWbtcPeak(overrides?: CallOverrides): Promise<string>;

	calcMint(
		token: string,
		amount: BigNumberish,
		overrides?: CallOverrides,
	): Promise<
		[BigNumber, BigNumber, BigNumber, BigNumber] & {
			poolId: BigNumber;
			idx: BigNumber;
			bBTC: BigNumber;
			fee: BigNumber;
		}
	>;

	calcMintWithRen(
		amount: BigNumberish,
		overrides?: CallOverrides,
	): Promise<
		[BigNumber, BigNumber, BigNumber, BigNumber] & {
			poolId: BigNumber;
			idx: BigNumber;
			bBTC: BigNumber;
			fee: BigNumber;
		}
	>;

	calcMintWithWbtc(
		amount: BigNumberish,
		overrides?: CallOverrides,
	): Promise<
		[BigNumber, BigNumber, BigNumber, BigNumber] & {
			poolId: BigNumber;
			idx: BigNumber;
			bBTC: BigNumber;
			fee: BigNumber;
		}
	>;

	curveLPToIbbtc(
		poolId: BigNumberish,
		_lp: BigNumberish,
		overrides?: CallOverrides,
	): Promise<[BigNumber, BigNumber] & { bBTC: BigNumber; fee: BigNumber }>;

	ibbtc(overrides?: CallOverrides): Promise<string>;

	mint(
		token: string,
		amount: BigNumberish,
		poolId: BigNumberish,
		idx: BigNumberish,
		minOut: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	owner(overrides?: CallOverrides): Promise<string>;

	pools(
		arg0: BigNumberish,
		overrides?: CallOverrides,
	): Promise<
		[string, string, string] & {
			lpToken: string;
			deposit: string;
			sett: string;
		}
	>;

	ren(overrides?: CallOverrides): Promise<string>;

	revokeContractAccess(
		account: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	settPeak(overrides?: CallOverrides): Promise<string>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	wbtc(overrides?: CallOverrides): Promise<string>;

	callStatic: {
		approveContractAccess(account: string, overrides?: CallOverrides): Promise<void>;

		approved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

		blockLock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		byvWbtcPeak(overrides?: CallOverrides): Promise<string>;

		calcMint(
			token: string,
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber] & {
				poolId: BigNumber;
				idx: BigNumber;
				bBTC: BigNumber;
				fee: BigNumber;
			}
		>;

		calcMintWithRen(
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber] & {
				poolId: BigNumber;
				idx: BigNumber;
				bBTC: BigNumber;
				fee: BigNumber;
			}
		>;

		calcMintWithWbtc(
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, BigNumber, BigNumber, BigNumber] & {
				poolId: BigNumber;
				idx: BigNumber;
				bBTC: BigNumber;
				fee: BigNumber;
			}
		>;

		curveLPToIbbtc(
			poolId: BigNumberish,
			_lp: BigNumberish,
			overrides?: CallOverrides,
		): Promise<[BigNumber, BigNumber] & { bBTC: BigNumber; fee: BigNumber }>;

		ibbtc(overrides?: CallOverrides): Promise<string>;

		mint(
			token: string,
			amount: BigNumberish,
			poolId: BigNumberish,
			idx: BigNumberish,
			minOut: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<string>;

		pools(
			arg0: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[string, string, string] & {
				lpToken: string;
				deposit: string;
				sett: string;
			}
		>;

		ren(overrides?: CallOverrides): Promise<string>;

		revokeContractAccess(account: string, overrides?: CallOverrides): Promise<void>;

		settPeak(overrides?: CallOverrides): Promise<string>;

		transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

		wbtc(overrides?: CallOverrides): Promise<string>;
	};

	filters: {
		'OwnershipTransferred(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null,
		): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null,
		): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;
	};

	estimateGas: {
		approveContractAccess(
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		approved(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		blockLock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		byvWbtcPeak(overrides?: CallOverrides): Promise<BigNumber>;

		calcMint(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		calcMintWithRen(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		calcMintWithWbtc(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		curveLPToIbbtc(poolId: BigNumberish, _lp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		ibbtc(overrides?: CallOverrides): Promise<BigNumber>;

		mint(
			token: string,
			amount: BigNumberish,
			poolId: BigNumberish,
			idx: BigNumberish,
			minOut: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		ren(overrides?: CallOverrides): Promise<BigNumber>;

		revokeContractAccess(
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		settPeak(overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		wbtc(overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		approveContractAccess(
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		approved(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		blockLock(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		byvWbtcPeak(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		calcMint(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		calcMintWithRen(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		calcMintWithWbtc(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		curveLPToIbbtc(
			poolId: BigNumberish,
			_lp: BigNumberish,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		ibbtc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		mint(
			token: string,
			amount: BigNumberish,
			poolId: BigNumberish,
			idx: BigNumberish,
			minOut: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		ren(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		revokeContractAccess(
			account: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		settPeak(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		wbtc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
	};
}
