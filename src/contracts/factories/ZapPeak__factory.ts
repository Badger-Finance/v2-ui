/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type { ZapPeak, ZapPeakInterface } from '../ZapPeak';

const _abi = [
	{
		inputs: [],
		stateMutability: 'nonpayable',
		type: 'constructor',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: 'address',
				name: 'previousOwner',
				type: 'address',
			},
			{
				indexed: true,
				internalType: 'address',
				name: 'newOwner',
				type: 'address',
			},
		],
		name: 'OwnershipTransferred',
		type: 'event',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: 'account',
				type: 'address',
			},
		],
		name: 'approveContractAccess',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		name: 'approved',
		outputs: [
			{
				internalType: 'bool',
				name: '',
				type: 'bool',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		name: 'blockLock',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'byvWbtcPeak',
		outputs: [
			{
				internalType: 'contract IByvWbtcPeak',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: 'token',
				type: 'address',
			},
			{
				internalType: 'uint256',
				name: 'amount',
				type: 'uint256',
			},
		],
		name: 'calcMint',
		outputs: [
			{
				internalType: 'uint256',
				name: 'poolId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'idx',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'bBTC',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'amount',
				type: 'uint256',
			},
		],
		name: 'calcMintWithRen',
		outputs: [
			{
				internalType: 'uint256',
				name: 'poolId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'idx',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'bBTC',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'amount',
				type: 'uint256',
			},
		],
		name: 'calcMintWithWbtc',
		outputs: [
			{
				internalType: 'uint256',
				name: 'poolId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'idx',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'bBTC',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'poolId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: '_lp',
				type: 'uint256',
			},
		],
		name: 'curveLPToIbbtc',
		outputs: [
			{
				internalType: 'uint256',
				name: 'bBTC',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'ibbtc',
		outputs: [
			{
				internalType: 'contract IbBTC',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'contract IERC20',
				name: 'token',
				type: 'address',
			},
			{
				internalType: 'uint256',
				name: 'amount',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'poolId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'idx',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'minOut',
				type: 'uint256',
			},
		],
		name: 'mint',
		outputs: [
			{
				internalType: 'uint256',
				name: '_ibbtc',
				type: 'uint256',
			},
		],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'owner',
		outputs: [
			{
				internalType: 'address',
				name: '_owner',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		name: 'pools',
		outputs: [
			{
				internalType: 'contract IERC20',
				name: 'lpToken',
				type: 'address',
			},
			{
				internalType: 'contract ICurveFi',
				name: 'deposit',
				type: 'address',
			},
			{
				internalType: 'contract ISett',
				name: 'sett',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'ren',
		outputs: [
			{
				internalType: 'contract IERC20',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: 'account',
				type: 'address',
			},
		],
		name: 'revokeContractAccess',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'settPeak',
		outputs: [
			{
				internalType: 'contract IBadgerSettPeak',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: 'newOwner',
				type: 'address',
			},
		],
		name: 'transferOwnership',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'wbtc',
		outputs: [
			{
				internalType: 'contract IERC20',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
];

export class ZapPeak__factory {
	static readonly abi = _abi;
	static createInterface(): ZapPeakInterface {
		return new utils.Interface(_abi) as ZapPeakInterface;
	}
	static connect(address: string, signerOrProvider: Signer | Provider): ZapPeak {
		return new Contract(address, _abi, signerOrProvider) as ZapPeak;
	}
}
