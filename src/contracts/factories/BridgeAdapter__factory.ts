/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type { BridgeAdapter, BridgeAdapterInterface } from '../BridgeAdapter';

const _abi = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'uint256',
				name: 'renbtc_burned',
				type: 'uint256',
			},
			{
				indexed: false,
				internalType: 'uint256',
				name: 'wbtc_transferred',
				type: 'uint256',
			},
			{
				indexed: false,
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		name: 'Burn',
		type: 'event',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'uint256',
				name: 'renbtc_minted',
				type: 'uint256',
			},
			{
				indexed: false,
				internalType: 'uint256',
				name: 'wbtc_swapped',
				type: 'uint256',
			},
			{
				indexed: false,
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		name: 'Mint',
		type: 'event',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: 'address',
				name: 'previousOwner',
				type: 'address',
			},
			{
				indexed: true,
				internalType: 'address',
				name: 'newOwner',
				type: 'address',
			},
		],
		name: 'OwnershipTransferred',
		type: 'event',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'uint256',
				name: 'amount',
				type: 'uint256',
			},
			{
				indexed: false,
				internalType: 'uint256',
				name: 'fee',
				type: 'uint256',
			},
		],
		name: 'RecoverStuck',
		type: 'event',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'bytes',
				name: 'error',
				type: 'bytes',
			},
		],
		name: 'SwapError',
		type: 'event',
	},
	{
		inputs: [],
		name: 'MAX_BPS',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		name: 'approvedVaults',
		outputs: [
			{
				internalType: 'bool',
				name: '',
				type: 'bool',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_token',
				type: 'address',
			},
			{
				internalType: 'address',
				name: '_vault',
				type: 'address',
			},
			{
				internalType: 'uint256',
				name: '_slippage',
				type: 'uint256',
			},
			{
				internalType: 'bytes',
				name: '_btcDestination',
				type: 'bytes',
			},
			{
				internalType: 'uint256',
				name: '_amount',
				type: 'uint256',
			},
		],
		name: 'burn',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'burnFeeBps',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'governance',
		outputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_governance',
				type: 'address',
			},
			{
				internalType: 'address',
				name: '_rewards',
				type: 'address',
			},
			{
				internalType: 'address',
				name: '_registry',
				type: 'address',
			},
			{
				internalType: 'address',
				name: '_router',
				type: 'address',
			},
			{
				internalType: 'address',
				name: '_wbtc',
				type: 'address',
			},
			{
				internalType: 'uint256[4]',
				name: '_feeConfig',
				type: 'uint256[4]',
			},
		],
		name: 'initialize',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_token',
				type: 'address',
			},
			{
				internalType: 'uint256',
				name: '_slippage',
				type: 'uint256',
			},
			{
				internalType: 'address',
				name: '_user',
				type: 'address',
			},
			{
				internalType: 'address',
				name: '_vault',
				type: 'address',
			},
			{
				internalType: 'uint256',
				name: '_amount',
				type: 'uint256',
			},
			{
				internalType: 'bytes32',
				name: '_nHash',
				type: 'bytes32',
			},
			{
				internalType: 'bytes',
				name: '_sig',
				type: 'bytes',
			},
		],
		name: 'mint',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'mintFeeBps',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'owner',
		outputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'bytes',
				name: 'encoded',
				type: 'bytes',
			},
			{
				internalType: 'uint256',
				name: '_amount',
				type: 'uint256',
			},
			{
				internalType: 'bytes32',
				name: '_nHash',
				type: 'bytes32',
			},
			{
				internalType: 'bytes',
				name: '_sig',
				type: 'bytes',
			},
		],
		name: 'recoverStuck',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'registry',
		outputs: [
			{
				internalType: 'contract IGatewayRegistry',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'renBTC',
		outputs: [
			{
				internalType: 'contract IERC20',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'renounceOwnership',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'rewards',
		outputs: [
			{
				internalType: 'address',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'router',
		outputs: [
			{
				internalType: 'contract ISwapStrategyRouter',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '_burnFeeBps',
				type: 'uint256',
			},
		],
		name: 'setBurnFeeBps',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_wrapper',
				type: 'address',
			},
		],
		name: 'setCurveTokenWrapper',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '_mintFeeBps',
				type: 'uint256',
			},
		],
		name: 'setMintFeeBps',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '_percentageFeeGovernanceBps',
				type: 'uint256',
			},
		],
		name: 'setPercentageFeeGovernanceBps',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '_percentageFeeRewardsBps',
				type: 'uint256',
			},
		],
		name: 'setPercentageFeeRewardsBps',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_registry',
				type: 'address',
			},
		],
		name: 'setRegistry',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_rewards',
				type: 'address',
			},
		],
		name: 'setRewards',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_router',
				type: 'address',
			},
		],
		name: 'setRouter',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: '_vault',
				type: 'address',
			},
			{
				internalType: 'bool',
				name: '_status',
				type: 'bool',
			},
		],
		name: 'setVaultApproval',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'sweep',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'address',
				name: 'newOwner',
				type: 'address',
			},
		],
		name: 'transferOwnership',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'version',
		outputs: [
			{
				internalType: 'string',
				name: '',
				type: 'string',
			},
		],
		stateMutability: 'pure',
		type: 'function',
	},
	{
		inputs: [],
		name: 'wBTC',
		outputs: [
			{
				internalType: 'contract IERC20',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
];

export class BridgeAdapter__factory {
	static readonly abi = _abi;
	static createInterface(): BridgeAdapterInterface {
		return new utils.Interface(_abi) as BridgeAdapterInterface;
	}
	static connect(address: string, signerOrProvider: Signer | Provider): BridgeAdapter {
		return new Contract(address, _abi, signerOrProvider) as BridgeAdapter;
	}
}
