/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface YearnWrapperInterface extends ethers.utils.Interface {
	functions: {
		'DOMAIN_SEPARATOR()': FunctionFragment;
		'DOMAIN_TYPEHASH()': FunctionFragment;
		'PERMIT_TYPEHASH()': FunctionFragment;
		'acceptAffiliate()': FunctionFragment;
		'affiliate()': FunctionFragment;
		'allVaults()': FunctionFragment;
		'allowance(address,address)': FunctionFragment;
		'approve(address,uint256)': FunctionFragment;
		'balanceOf(address)': FunctionFragment;
		'bestVault()': FunctionFragment;
		'decimals()': FunctionFragment;
		'decreaseAllowance(address,uint256)': FunctionFragment;
		'deposit(uint256,bytes32[])': FunctionFragment;
		'disableExperimentalMode()': FunctionFragment;
		'experimentalMode()': FunctionFragment;
		'experimentalVault()': FunctionFragment;
		'guardian()': FunctionFragment;
		'guestList()': FunctionFragment;
		'increaseAllowance(address,uint256)': FunctionFragment;
		'initialize(address,address,string,string,address,bool,address)': FunctionFragment;
		'manager()': FunctionFragment;
		'migrate(uint256,uint256)': FunctionFragment;
		'name()': FunctionFragment;
		'nonces(address)': FunctionFragment;
		'pause()': FunctionFragment;
		'paused()': FunctionFragment;
		'pendingAffiliate()': FunctionFragment;
		'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
		'pricePerShare()': FunctionFragment;
		'registry()': FunctionFragment;
		'setAffiliate(address)': FunctionFragment;
		'setGuardian(address)': FunctionFragment;
		'setGuestList(address)': FunctionFragment;
		'setManager(address)': FunctionFragment;
		'setRegistry(address)': FunctionFragment;
		'setWithdrawalFee(uint256)': FunctionFragment;
		'setWithdrawalMaxDeviationThreshold(uint256)': FunctionFragment;
		'shareValue(uint256)': FunctionFragment;
		'symbol()': FunctionFragment;
		'token()': FunctionFragment;
		'totalAssets()': FunctionFragment;
		'totalSupply()': FunctionFragment;
		'totalVaultBalance(address)': FunctionFragment;
		'totalWrapperBalance(address)': FunctionFragment;
		'transfer(address,uint256)': FunctionFragment;
		'transferFrom(address,address,uint256)': FunctionFragment;
		'unpause()': FunctionFragment;
		'withdraw(uint256)': FunctionFragment;
		'withdrawalFee()': FunctionFragment;
		'withdrawalMaxDeviationThreshold()': FunctionFragment;
	};

	encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
	encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
	encodeFunctionData(functionFragment: 'acceptAffiliate', values?: undefined): string;
	encodeFunctionData(functionFragment: 'affiliate', values?: undefined): string;
	encodeFunctionData(functionFragment: 'allVaults', values?: undefined): string;
	encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
	encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
	encodeFunctionData(functionFragment: 'bestVault', values?: undefined): string;
	encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
	encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BytesLike[]]): string;
	encodeFunctionData(functionFragment: 'disableExperimentalMode', values?: undefined): string;
	encodeFunctionData(functionFragment: 'experimentalMode', values?: undefined): string;
	encodeFunctionData(functionFragment: 'experimentalVault', values?: undefined): string;
	encodeFunctionData(functionFragment: 'guardian', values?: undefined): string;
	encodeFunctionData(functionFragment: 'guestList', values?: undefined): string;
	encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'initialize',
		values: [string, string, string, string, string, boolean, string],
	): string;
	encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
	encodeFunctionData(functionFragment: 'migrate', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'name', values?: undefined): string;
	encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
	encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
	encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
	encodeFunctionData(functionFragment: 'pendingAffiliate', values?: undefined): string;
	encodeFunctionData(
		functionFragment: 'permit',
		values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
	): string;
	encodeFunctionData(functionFragment: 'pricePerShare', values?: undefined): string;
	encodeFunctionData(functionFragment: 'registry', values?: undefined): string;
	encodeFunctionData(functionFragment: 'setAffiliate', values: [string]): string;
	encodeFunctionData(functionFragment: 'setGuardian', values: [string]): string;
	encodeFunctionData(functionFragment: 'setGuestList', values: [string]): string;
	encodeFunctionData(functionFragment: 'setManager', values: [string]): string;
	encodeFunctionData(functionFragment: 'setRegistry', values: [string]): string;
	encodeFunctionData(functionFragment: 'setWithdrawalFee', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'setWithdrawalMaxDeviationThreshold', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'shareValue', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
	encodeFunctionData(functionFragment: 'token', values?: undefined): string;
	encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
	encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
	encodeFunctionData(functionFragment: 'totalVaultBalance', values: [string]): string;
	encodeFunctionData(functionFragment: 'totalWrapperBalance', values: [string]): string;
	encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
	encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'withdrawalFee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'withdrawalMaxDeviationThreshold', values?: undefined): string;

	decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'acceptAffiliate', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'affiliate', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'allVaults', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'bestVault', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'disableExperimentalMode', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'experimentalMode', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'experimentalVault', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'guardian', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'guestList', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'pendingAffiliate', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'pricePerShare', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setAffiliate', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setGuardian', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setGuestList', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setRegistry', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setWithdrawalFee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setWithdrawalMaxDeviationThreshold', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'shareValue', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalVaultBalance', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalWrapperBalance', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'withdrawalFee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'withdrawalMaxDeviationThreshold', data: BytesLike): Result;

	events: {
		'AcceptAffiliate(address)': EventFragment;
		'Approval(address,address,uint256)': EventFragment;
		'Burn(address,uint256)': EventFragment;
		'Deposit(address,uint256)': EventFragment;
		'Mint(address,uint256)': EventFragment;
		'Paused(address)': EventFragment;
		'PendingAffiliate(address)': EventFragment;
		'SetExperimentalVault(address)': EventFragment;
		'SetGuardian(address)': EventFragment;
		'SetManager(address)': EventFragment;
		'SetWithdrawalFee(uint256)': EventFragment;
		'SetWithdrawalMaxDeviationThreshold(uint256)': EventFragment;
		'Transfer(address,address,uint256)': EventFragment;
		'Unpaused(address)': EventFragment;
		'UpdateGuestList(address)': EventFragment;
		'Withdraw(address,uint256)': EventFragment;
		'WithdrawalFee(address,uint256)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'AcceptAffiliate'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'PendingAffiliate'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetExperimentalVault'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetGuardian'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetManager'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetWithdrawalFee'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetWithdrawalMaxDeviationThreshold'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'UpdateGuestList'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'WithdrawalFee'): EventFragment;
}

export type AcceptAffiliateEvent = TypedEvent<[string] & { affiliate: string }>;

export type ApprovalEvent = TypedEvent<
	[string, string, BigNumber] & {
		owner: string;
		spender: string;
		value: BigNumber;
	}
>;

export type BurnEvent = TypedEvent<[string, BigNumber] & { account: string; shares: BigNumber }>;

export type DepositEvent = TypedEvent<[string, BigNumber] & { account: string; amount: BigNumber }>;

export type MintEvent = TypedEvent<[string, BigNumber] & { account: string; shares: BigNumber }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PendingAffiliateEvent = TypedEvent<[string] & { affiliate: string }>;

export type SetExperimentalVaultEvent = TypedEvent<[string] & { vault: string }>;

export type SetGuardianEvent = TypedEvent<[string] & { guardian: string }>;

export type SetManagerEvent = TypedEvent<[string] & { manager: string }>;

export type SetWithdrawalFeeEvent = TypedEvent<[BigNumber] & { withdrawalFee: BigNumber }>;

export type SetWithdrawalMaxDeviationThresholdEvent = TypedEvent<
	[BigNumber] & { withdrawalMaxDeviationThreshold: BigNumber }
>;

export type TransferEvent = TypedEvent<[string, string, BigNumber] & { from: string; to: string; value: BigNumber }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpdateGuestListEvent = TypedEvent<[string] & { guestList: string }>;

export type WithdrawEvent = TypedEvent<[string, BigNumber] & { account: string; amount: BigNumber }>;

export type WithdrawalFeeEvent = TypedEvent<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

export class YearnWrapper extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: YearnWrapperInterface;

	functions: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

		DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

		PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

		acceptAffiliate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		affiliate(overrides?: CallOverrides): Promise<[string]>;

		allVaults(overrides?: CallOverrides): Promise<[string[]]>;

		allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		approve(
			spender: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		bestVault(overrides?: CallOverrides): Promise<[string]>;

		decimals(overrides?: CallOverrides): Promise<[number]>;

		decreaseAllowance(
			spender: string,
			subtractedValue: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		'deposit(uint256,bytes32[])'(
			amount: BigNumberish,
			merkleProof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		'deposit(bytes32[])'(
			merkleProof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		disableExperimentalMode(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		experimentalMode(overrides?: CallOverrides): Promise<[boolean]>;

		experimentalVault(overrides?: CallOverrides): Promise<[string]>;

		guardian(overrides?: CallOverrides): Promise<[string]>;

		guestList(overrides?: CallOverrides): Promise<[string]>;

		increaseAllowance(
			spender: string,
			addedValue: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		initialize(
			_token: string,
			_registry: string,
			name: string,
			symbol: string,
			_guardian: string,
			_useExperimentalMode: boolean,
			_experimentalVault: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		manager(overrides?: CallOverrides): Promise<[string]>;

		'migrate(uint256,uint256)'(
			amount: BigNumberish,
			maxMigrationLoss: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		'migrate(uint256)'(
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		'migrate()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		name(overrides?: CallOverrides): Promise<[string]>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		paused(overrides?: CallOverrides): Promise<[boolean]>;

		pendingAffiliate(overrides?: CallOverrides): Promise<[string]>;

		permit(
			owner: string,
			spender: string,
			amount: BigNumberish,
			deadline: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

		registry(overrides?: CallOverrides): Promise<[string]>;

		setAffiliate(
			_affiliate: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setGuardian(
			_guardian: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setGuestList(
			_guestList: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setManager(
			_manager: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setRegistry(
			_registry: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setWithdrawalFee(
			_fee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setWithdrawalMaxDeviationThreshold(
			_maxDeviationThreshold: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		shareValue(numShares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

		symbol(overrides?: CallOverrides): Promise<[string]>;

		token(overrides?: CallOverrides): Promise<[string]>;

		totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { assets: BigNumber }>;

		totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

		totalVaultBalance(account: string, overrides?: CallOverrides): Promise<[BigNumber] & { balance: BigNumber }>;

		totalWrapperBalance(account: string, overrides?: CallOverrides): Promise<[BigNumber] & { balance: BigNumber }>;

		transfer(
			recipient: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		transferFrom(
			sender: string,
			recipient: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		'withdraw(uint256)'(
			shares: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		withdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

		withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
	};

	DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

	DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

	PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

	acceptAffiliate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	affiliate(overrides?: CallOverrides): Promise<string>;

	allVaults(overrides?: CallOverrides): Promise<string[]>;

	allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

	approve(
		spender: string,
		amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

	bestVault(overrides?: CallOverrides): Promise<string>;

	decimals(overrides?: CallOverrides): Promise<number>;

	decreaseAllowance(
		spender: string,
		subtractedValue: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	'deposit(uint256,bytes32[])'(
		amount: BigNumberish,
		merkleProof: BytesLike[],
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	'deposit(bytes32[])'(
		merkleProof: BytesLike[],
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	disableExperimentalMode(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	experimentalMode(overrides?: CallOverrides): Promise<boolean>;

	experimentalVault(overrides?: CallOverrides): Promise<string>;

	guardian(overrides?: CallOverrides): Promise<string>;

	guestList(overrides?: CallOverrides): Promise<string>;

	increaseAllowance(
		spender: string,
		addedValue: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	initialize(
		_token: string,
		_registry: string,
		name: string,
		symbol: string,
		_guardian: string,
		_useExperimentalMode: boolean,
		_experimentalVault: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	manager(overrides?: CallOverrides): Promise<string>;

	'migrate(uint256,uint256)'(
		amount: BigNumberish,
		maxMigrationLoss: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	'migrate(uint256)'(
		amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	'migrate()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	name(overrides?: CallOverrides): Promise<string>;

	nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

	pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	paused(overrides?: CallOverrides): Promise<boolean>;

	pendingAffiliate(overrides?: CallOverrides): Promise<string>;

	permit(
		owner: string,
		spender: string,
		amount: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

	registry(overrides?: CallOverrides): Promise<string>;

	setAffiliate(
		_affiliate: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setGuardian(
		_guardian: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setGuestList(
		_guestList: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setManager(
		_manager: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setRegistry(
		_registry: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setWithdrawalFee(
		_fee: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setWithdrawalMaxDeviationThreshold(
		_maxDeviationThreshold: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	shareValue(numShares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	symbol(overrides?: CallOverrides): Promise<string>;

	token(overrides?: CallOverrides): Promise<string>;

	totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

	totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

	totalVaultBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

	totalWrapperBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

	transfer(
		recipient: string,
		amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	transferFrom(
		sender: string,
		recipient: string,
		amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	'withdraw(uint256)'(
		shares: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

	withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

	callStatic: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

		DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

		PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

		acceptAffiliate(overrides?: CallOverrides): Promise<void>;

		affiliate(overrides?: CallOverrides): Promise<string>;

		allVaults(overrides?: CallOverrides): Promise<string[]>;

		allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

		approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

		bestVault(overrides?: CallOverrides): Promise<string>;

		decimals(overrides?: CallOverrides): Promise<number>;

		decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		'deposit(uint256,bytes32[])'(
			amount: BigNumberish,
			merkleProof: BytesLike[],
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		'deposit(bytes32[])'(merkleProof: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

		disableExperimentalMode(overrides?: CallOverrides): Promise<void>;

		experimentalMode(overrides?: CallOverrides): Promise<boolean>;

		experimentalVault(overrides?: CallOverrides): Promise<string>;

		guardian(overrides?: CallOverrides): Promise<string>;

		guestList(overrides?: CallOverrides): Promise<string>;

		increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		initialize(
			_token: string,
			_registry: string,
			name: string,
			symbol: string,
			_guardian: string,
			_useExperimentalMode: boolean,
			_experimentalVault: string,
			overrides?: CallOverrides,
		): Promise<void>;

		manager(overrides?: CallOverrides): Promise<string>;

		'migrate(uint256,uint256)'(
			amount: BigNumberish,
			maxMigrationLoss: BigNumberish,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		'migrate(uint256)'(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		'migrate()'(overrides?: CallOverrides): Promise<BigNumber>;

		name(overrides?: CallOverrides): Promise<string>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		pause(overrides?: CallOverrides): Promise<void>;

		paused(overrides?: CallOverrides): Promise<boolean>;

		pendingAffiliate(overrides?: CallOverrides): Promise<string>;

		permit(
			owner: string,
			spender: string,
			amount: BigNumberish,
			deadline: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: CallOverrides,
		): Promise<void>;

		pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

		registry(overrides?: CallOverrides): Promise<string>;

		setAffiliate(_affiliate: string, overrides?: CallOverrides): Promise<void>;

		setGuardian(_guardian: string, overrides?: CallOverrides): Promise<void>;

		setGuestList(_guestList: string, overrides?: CallOverrides): Promise<void>;

		setManager(_manager: string, overrides?: CallOverrides): Promise<void>;

		setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

		setWithdrawalFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

		setWithdrawalMaxDeviationThreshold(
			_maxDeviationThreshold: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		shareValue(numShares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		symbol(overrides?: CallOverrides): Promise<string>;

		token(overrides?: CallOverrides): Promise<string>;

		totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		totalVaultBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

		totalWrapperBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

		transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

		transferFrom(
			sender: string,
			recipient: string,
			amount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<boolean>;

		unpause(overrides?: CallOverrides): Promise<void>;

		'withdraw(uint256)'(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		'withdraw()'(overrides?: CallOverrides): Promise<BigNumber>;

		withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

		withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>;
	};

	filters: {
		'AcceptAffiliate(address)'(affiliate?: null): TypedEventFilter<[string], { affiliate: string }>;

		AcceptAffiliate(affiliate?: null): TypedEventFilter<[string], { affiliate: string }>;

		'Approval(address,address,uint256)'(
			owner?: string | null,
			spender?: string | null,
			value?: null,
		): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

		Approval(
			owner?: string | null,
			spender?: string | null,
			value?: null,
		): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

		'Burn(address,uint256)'(
			account?: string | null,
			shares?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; shares: BigNumber }>;

		Burn(
			account?: string | null,
			shares?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; shares: BigNumber }>;

		'Deposit(address,uint256)'(
			account?: string | null,
			amount?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; amount: BigNumber }>;

		Deposit(
			account?: string | null,
			amount?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; amount: BigNumber }>;

		'Mint(address,uint256)'(
			account?: string | null,
			shares?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; shares: BigNumber }>;

		Mint(
			account?: string | null,
			shares?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; shares: BigNumber }>;

		'Paused(address)'(account?: null): TypedEventFilter<[string], { account: string }>;

		Paused(account?: null): TypedEventFilter<[string], { account: string }>;

		'PendingAffiliate(address)'(affiliate?: null): TypedEventFilter<[string], { affiliate: string }>;

		PendingAffiliate(affiliate?: null): TypedEventFilter<[string], { affiliate: string }>;

		'SetExperimentalVault(address)'(vault?: null): TypedEventFilter<[string], { vault: string }>;

		SetExperimentalVault(vault?: null): TypedEventFilter<[string], { vault: string }>;

		'SetGuardian(address)'(guardian?: null): TypedEventFilter<[string], { guardian: string }>;

		SetGuardian(guardian?: null): TypedEventFilter<[string], { guardian: string }>;

		'SetManager(address)'(manager?: null): TypedEventFilter<[string], { manager: string }>;

		SetManager(manager?: null): TypedEventFilter<[string], { manager: string }>;

		'SetWithdrawalFee(uint256)'(withdrawalFee?: null): TypedEventFilter<[BigNumber], { withdrawalFee: BigNumber }>;

		SetWithdrawalFee(withdrawalFee?: null): TypedEventFilter<[BigNumber], { withdrawalFee: BigNumber }>;

		'SetWithdrawalMaxDeviationThreshold(uint256)'(
			withdrawalMaxDeviationThreshold?: null,
		): TypedEventFilter<[BigNumber], { withdrawalMaxDeviationThreshold: BigNumber }>;

		SetWithdrawalMaxDeviationThreshold(
			withdrawalMaxDeviationThreshold?: null,
		): TypedEventFilter<[BigNumber], { withdrawalMaxDeviationThreshold: BigNumber }>;

		'Transfer(address,address,uint256)'(
			from?: string | null,
			to?: string | null,
			value?: null,
		): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

		Transfer(
			from?: string | null,
			to?: string | null,
			value?: null,
		): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

		'Unpaused(address)'(account?: null): TypedEventFilter<[string], { account: string }>;

		Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

		'UpdateGuestList(address)'(guestList?: null): TypedEventFilter<[string], { guestList: string }>;

		UpdateGuestList(guestList?: null): TypedEventFilter<[string], { guestList: string }>;

		'Withdraw(address,uint256)'(
			account?: string | null,
			amount?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; amount: BigNumber }>;

		Withdraw(
			account?: string | null,
			amount?: null,
		): TypedEventFilter<[string, BigNumber], { account: string; amount: BigNumber }>;

		'WithdrawalFee(address,uint256)'(
			recipient?: string | null,
			amount?: null,
		): TypedEventFilter<[string, BigNumber], { recipient: string; amount: BigNumber }>;

		WithdrawalFee(
			recipient?: string | null,
			amount?: null,
		): TypedEventFilter<[string, BigNumber], { recipient: string; amount: BigNumber }>;
	};

	estimateGas: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

		DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

		PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

		acceptAffiliate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		affiliate(overrides?: CallOverrides): Promise<BigNumber>;

		allVaults(overrides?: CallOverrides): Promise<BigNumber>;

		allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

		approve(
			spender: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

		bestVault(overrides?: CallOverrides): Promise<BigNumber>;

		decimals(overrides?: CallOverrides): Promise<BigNumber>;

		decreaseAllowance(
			spender: string,
			subtractedValue: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		'deposit(uint256,bytes32[])'(
			amount: BigNumberish,
			merkleProof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		'deposit(bytes32[])'(
			merkleProof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		disableExperimentalMode(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		experimentalMode(overrides?: CallOverrides): Promise<BigNumber>;

		experimentalVault(overrides?: CallOverrides): Promise<BigNumber>;

		guardian(overrides?: CallOverrides): Promise<BigNumber>;

		guestList(overrides?: CallOverrides): Promise<BigNumber>;

		increaseAllowance(
			spender: string,
			addedValue: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		initialize(
			_token: string,
			_registry: string,
			name: string,
			symbol: string,
			_guardian: string,
			_useExperimentalMode: boolean,
			_experimentalVault: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		manager(overrides?: CallOverrides): Promise<BigNumber>;

		'migrate(uint256,uint256)'(
			amount: BigNumberish,
			maxMigrationLoss: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		'migrate(uint256)'(
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		'migrate()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		name(overrides?: CallOverrides): Promise<BigNumber>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		paused(overrides?: CallOverrides): Promise<BigNumber>;

		pendingAffiliate(overrides?: CallOverrides): Promise<BigNumber>;

		permit(
			owner: string,
			spender: string,
			amount: BigNumberish,
			deadline: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

		registry(overrides?: CallOverrides): Promise<BigNumber>;

		setAffiliate(
			_affiliate: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setGuardian(_guardian: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		setGuestList(
			_guestList: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setManager(_manager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		setRegistry(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		setWithdrawalFee(
			_fee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setWithdrawalMaxDeviationThreshold(
			_maxDeviationThreshold: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		shareValue(numShares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		symbol(overrides?: CallOverrides): Promise<BigNumber>;

		token(overrides?: CallOverrides): Promise<BigNumber>;

		totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		totalVaultBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

		totalWrapperBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

		transfer(
			recipient: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		transferFrom(
			sender: string,
			recipient: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		'withdraw(uint256)'(
			shares: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

		withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		acceptAffiliate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		affiliate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		allVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		approve(
			spender: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		bestVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		decreaseAllowance(
			spender: string,
			subtractedValue: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		'deposit(uint256,bytes32[])'(
			amount: BigNumberish,
			merkleProof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		'deposit(bytes32[])'(
			merkleProof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		disableExperimentalMode(
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		experimentalMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		experimentalVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		guestList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		increaseAllowance(
			spender: string,
			addedValue: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		initialize(
			_token: string,
			_registry: string,
			name: string,
			symbol: string,
			_guardian: string,
			_useExperimentalMode: boolean,
			_experimentalVault: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		'migrate(uint256,uint256)'(
			amount: BigNumberish,
			maxMigrationLoss: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		'migrate(uint256)'(
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		'migrate()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		pendingAffiliate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		permit(
			owner: string,
			spender: string,
			amount: BigNumberish,
			deadline: BigNumberish,
			v: BigNumberish,
			r: BytesLike,
			s: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		setAffiliate(
			_affiliate: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setGuardian(
			_guardian: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setGuestList(
			_guestList: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setManager(
			_manager: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setRegistry(
			_registry: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setWithdrawalFee(
			_fee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setWithdrawalMaxDeviationThreshold(
			_maxDeviationThreshold: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		shareValue(numShares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalVaultBalance(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalWrapperBalance(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transfer(
			recipient: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		transferFrom(
			sender: string,
			recipient: string,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		'withdraw(uint256)'(
			shares: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		withdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		withdrawalMaxDeviationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
	};
}
