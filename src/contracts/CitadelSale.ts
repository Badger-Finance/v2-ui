/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CitadelSaleInterface extends utils.Interface {
	contractName: 'CitadelSale';
	functions: {
		'boughtAmounts(address)': FunctionFragment;
		'buy(uint256,uint8,bytes32[])': FunctionFragment;
		'claim()': FunctionFragment;
		'daoCommitments(uint8)': FunctionFragment;
		'finalize()': FunctionFragment;
		'finalized()': FunctionFragment;
		'getAmountOut(uint256)': FunctionFragment;
		'getTokenInLimitLeft()': FunctionFragment;
		'guestlist()': FunctionFragment;
		'hasClaimed(address)': FunctionFragment;
		'initialize(address,address,uint64,uint64,uint256,address,address,uint256)': FunctionFragment;
		'owner()': FunctionFragment;
		'renounceOwnership()': FunctionFragment;
		'saleDuration()': FunctionFragment;
		'saleEnded()': FunctionFragment;
		'saleRecipient()': FunctionFragment;
		'saleStart()': FunctionFragment;
		'setGuestlist(address)': FunctionFragment;
		'setSaleDuration(uint64)': FunctionFragment;
		'setSaleRecipient(address)': FunctionFragment;
		'setSaleStart(uint64)': FunctionFragment;
		'setTokenInLimit(uint256)': FunctionFragment;
		'setTokenOutPrice(uint256)': FunctionFragment;
		'sweep(address)': FunctionFragment;
		'tokenIn()': FunctionFragment;
		'tokenInLimit()': FunctionFragment;
		'tokenOut()': FunctionFragment;
		'tokenOutPrice()': FunctionFragment;
		'totalTokenIn()': FunctionFragment;
		'totalTokenOutBought()': FunctionFragment;
		'totalTokenOutClaimed()': FunctionFragment;
		'transferOwnership(address)': FunctionFragment;
	};

	encodeFunctionData(functionFragment: 'boughtAmounts', values: [string]): string;
	encodeFunctionData(functionFragment: 'buy', values: [BigNumberish, BigNumberish, BytesLike[]]): string;
	encodeFunctionData(functionFragment: 'claim', values?: undefined): string;
	encodeFunctionData(functionFragment: 'daoCommitments', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'finalize', values?: undefined): string;
	encodeFunctionData(functionFragment: 'finalized', values?: undefined): string;
	encodeFunctionData(functionFragment: 'getAmountOut', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'getTokenInLimitLeft', values?: undefined): string;
	encodeFunctionData(functionFragment: 'guestlist', values?: undefined): string;
	encodeFunctionData(functionFragment: 'hasClaimed', values: [string]): string;
	encodeFunctionData(
		functionFragment: 'initialize',
		values: [string, string, BigNumberish, BigNumberish, BigNumberish, string, string, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
	encodeFunctionData(functionFragment: 'saleDuration', values?: undefined): string;
	encodeFunctionData(functionFragment: 'saleEnded', values?: undefined): string;
	encodeFunctionData(functionFragment: 'saleRecipient', values?: undefined): string;
	encodeFunctionData(functionFragment: 'saleStart', values?: undefined): string;
	encodeFunctionData(functionFragment: 'setGuestlist', values: [string]): string;
	encodeFunctionData(functionFragment: 'setSaleDuration', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'setSaleRecipient', values: [string]): string;
	encodeFunctionData(functionFragment: 'setSaleStart', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'setTokenInLimit', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'setTokenOutPrice', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'sweep', values: [string]): string;
	encodeFunctionData(functionFragment: 'tokenIn', values?: undefined): string;
	encodeFunctionData(functionFragment: 'tokenInLimit', values?: undefined): string;
	encodeFunctionData(functionFragment: 'tokenOut', values?: undefined): string;
	encodeFunctionData(functionFragment: 'tokenOutPrice', values?: undefined): string;
	encodeFunctionData(functionFragment: 'totalTokenIn', values?: undefined): string;
	encodeFunctionData(functionFragment: 'totalTokenOutBought', values?: undefined): string;
	encodeFunctionData(functionFragment: 'totalTokenOutClaimed', values?: undefined): string;
	encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

	decodeFunctionResult(functionFragment: 'boughtAmounts', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'daoCommitments', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'finalize', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'finalized', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getAmountOut', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getTokenInLimitLeft', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'guestlist', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'hasClaimed', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'saleDuration', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'saleEnded', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'saleRecipient', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'saleStart', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setGuestlist', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setSaleDuration', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setSaleRecipient', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setSaleStart', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setTokenInLimit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setTokenOutPrice', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'tokenIn', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'tokenInLimit', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'tokenOut', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'tokenOutPrice', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalTokenIn', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalTokenOutBought', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'totalTokenOutClaimed', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

	events: {
		'Claim(address,uint256)': EventFragment;
		'Finalized()': EventFragment;
		'OwnershipTransferred(address,address)': EventFragment;
		'Sale(address,uint256,uint256)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Finalized'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Sale'): EventFragment;
}

export type ClaimEvent = TypedEvent<[string, BigNumber], { claimer: string; amount: BigNumber }>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type FinalizedEvent = TypedEvent<[], {}>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type SaleEvent = TypedEvent<
	[string, BigNumber, BigNumber],
	{ buyer: string; amountIn: BigNumber; amountOut: BigNumber }
>;

export type SaleEventFilter = TypedEventFilter<SaleEvent>;

export interface CitadelSale extends BaseContract {
	contractName: 'CitadelSale';
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	interface: CitadelSaleInterface;

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>;

	listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
	listeners(eventName?: string): Array<Listener>;
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
	removeAllListeners(eventName?: string): this;
	off: OnEvent<this>;
	on: OnEvent<this>;
	once: OnEvent<this>;
	removeListener: OnEvent<this>;

	functions: {
		boughtAmounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

		buy(
			_tokenInAmount: BigNumberish,
			_daoId: BigNumberish,
			_proof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		daoCommitments(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

		finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		finalized(overrides?: CallOverrides): Promise<[boolean]>;

		getAmountOut(
			_tokenInAmount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<[BigNumber] & { tokenOutAmount_: BigNumber }>;

		getTokenInLimitLeft(overrides?: CallOverrides): Promise<[BigNumber] & { limitLeft_: BigNumber }>;

		guestlist(overrides?: CallOverrides): Promise<[string]>;

		hasClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

		initialize(
			_tokenOut: string,
			_tokenIn: string,
			_saleStart: BigNumberish,
			_saleDuration: BigNumberish,
			_tokenOutPrice: BigNumberish,
			_saleRecipient: string,
			_guestlist: string,
			_tokenInLimit: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		saleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

		saleEnded(overrides?: CallOverrides): Promise<[boolean] & { hasEnded_: boolean }>;

		saleRecipient(overrides?: CallOverrides): Promise<[string]>;

		saleStart(overrides?: CallOverrides): Promise<[BigNumber]>;

		setGuestlist(
			_guestlist: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setSaleDuration(
			_saleDuration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setSaleRecipient(
			_saleRecipient: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setSaleStart(
			_saleStart: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setTokenInLimit(
			_tokenInLimit: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		setTokenOutPrice(
			_tokenOutPrice: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		sweep(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		tokenIn(overrides?: CallOverrides): Promise<[string]>;

		tokenInLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

		tokenOut(overrides?: CallOverrides): Promise<[string]>;

		tokenOutPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

		totalTokenIn(overrides?: CallOverrides): Promise<[BigNumber]>;

		totalTokenOutBought(overrides?: CallOverrides): Promise<[BigNumber]>;

		totalTokenOutClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;
	};

	boughtAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

	buy(
		_tokenInAmount: BigNumberish,
		_daoId: BigNumberish,
		_proof: BytesLike[],
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	daoCommitments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	finalized(overrides?: CallOverrides): Promise<boolean>;

	getAmountOut(_tokenInAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	getTokenInLimitLeft(overrides?: CallOverrides): Promise<BigNumber>;

	guestlist(overrides?: CallOverrides): Promise<string>;

	hasClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

	initialize(
		_tokenOut: string,
		_tokenIn: string,
		_saleStart: BigNumberish,
		_saleDuration: BigNumberish,
		_tokenOutPrice: BigNumberish,
		_saleRecipient: string,
		_guestlist: string,
		_tokenInLimit: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	owner(overrides?: CallOverrides): Promise<string>;

	renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

	saleEnded(overrides?: CallOverrides): Promise<boolean>;

	saleRecipient(overrides?: CallOverrides): Promise<string>;

	saleStart(overrides?: CallOverrides): Promise<BigNumber>;

	setGuestlist(
		_guestlist: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setSaleDuration(
		_saleDuration: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setSaleRecipient(
		_saleRecipient: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setSaleStart(
		_saleStart: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setTokenInLimit(
		_tokenInLimit: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	setTokenOutPrice(
		_tokenOutPrice: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	sweep(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	tokenIn(overrides?: CallOverrides): Promise<string>;

	tokenInLimit(overrides?: CallOverrides): Promise<BigNumber>;

	tokenOut(overrides?: CallOverrides): Promise<string>;

	tokenOutPrice(overrides?: CallOverrides): Promise<BigNumber>;

	totalTokenIn(overrides?: CallOverrides): Promise<BigNumber>;

	totalTokenOutBought(overrides?: CallOverrides): Promise<BigNumber>;

	totalTokenOutClaimed(overrides?: CallOverrides): Promise<BigNumber>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	callStatic: {
		boughtAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		buy(
			_tokenInAmount: BigNumberish,
			_daoId: BigNumberish,
			_proof: BytesLike[],
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		claim(overrides?: CallOverrides): Promise<BigNumber>;

		daoCommitments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		finalize(overrides?: CallOverrides): Promise<void>;

		finalized(overrides?: CallOverrides): Promise<boolean>;

		getAmountOut(_tokenInAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getTokenInLimitLeft(overrides?: CallOverrides): Promise<BigNumber>;

		guestlist(overrides?: CallOverrides): Promise<string>;

		hasClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

		initialize(
			_tokenOut: string,
			_tokenIn: string,
			_saleStart: BigNumberish,
			_saleDuration: BigNumberish,
			_tokenOutPrice: BigNumberish,
			_saleRecipient: string,
			_guestlist: string,
			_tokenInLimit: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		owner(overrides?: CallOverrides): Promise<string>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

		saleEnded(overrides?: CallOverrides): Promise<boolean>;

		saleRecipient(overrides?: CallOverrides): Promise<string>;

		saleStart(overrides?: CallOverrides): Promise<BigNumber>;

		setGuestlist(_guestlist: string, overrides?: CallOverrides): Promise<void>;

		setSaleDuration(_saleDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

		setSaleRecipient(_saleRecipient: string, overrides?: CallOverrides): Promise<void>;

		setSaleStart(_saleStart: BigNumberish, overrides?: CallOverrides): Promise<void>;

		setTokenInLimit(_tokenInLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

		setTokenOutPrice(_tokenOutPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

		sweep(_token: string, overrides?: CallOverrides): Promise<void>;

		tokenIn(overrides?: CallOverrides): Promise<string>;

		tokenInLimit(overrides?: CallOverrides): Promise<BigNumber>;

		tokenOut(overrides?: CallOverrides): Promise<string>;

		tokenOutPrice(overrides?: CallOverrides): Promise<BigNumber>;

		totalTokenIn(overrides?: CallOverrides): Promise<BigNumber>;

		totalTokenOutBought(overrides?: CallOverrides): Promise<BigNumber>;

		totalTokenOutClaimed(overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
	};

	filters: {
		'Claim(address,uint256)'(claimer?: string | null, amount?: null): ClaimEventFilter;
		Claim(claimer?: string | null, amount?: null): ClaimEventFilter;

		'Finalized()'(): FinalizedEventFilter;
		Finalized(): FinalizedEventFilter;

		'OwnershipTransferred(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null,
		): OwnershipTransferredEventFilter;
		OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

		'Sale(address,uint256,uint256)'(buyer?: string | null, amountIn?: null, amountOut?: null): SaleEventFilter;
		Sale(buyer?: string | null, amountIn?: null, amountOut?: null): SaleEventFilter;
	};

	estimateGas: {
		boughtAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		buy(
			_tokenInAmount: BigNumberish,
			_daoId: BigNumberish,
			_proof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		daoCommitments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		finalized(overrides?: CallOverrides): Promise<BigNumber>;

		getAmountOut(_tokenInAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		getTokenInLimitLeft(overrides?: CallOverrides): Promise<BigNumber>;

		guestlist(overrides?: CallOverrides): Promise<BigNumber>;

		hasClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		initialize(
			_tokenOut: string,
			_tokenIn: string,
			_saleStart: BigNumberish,
			_saleDuration: BigNumberish,
			_tokenOutPrice: BigNumberish,
			_saleRecipient: string,
			_guestlist: string,
			_tokenInLimit: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		saleDuration(overrides?: CallOverrides): Promise<BigNumber>;

		saleEnded(overrides?: CallOverrides): Promise<BigNumber>;

		saleRecipient(overrides?: CallOverrides): Promise<BigNumber>;

		saleStart(overrides?: CallOverrides): Promise<BigNumber>;

		setGuestlist(
			_guestlist: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setSaleDuration(
			_saleDuration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setSaleRecipient(
			_saleRecipient: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setSaleStart(
			_saleStart: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setTokenInLimit(
			_tokenInLimit: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		setTokenOutPrice(
			_tokenOutPrice: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		sweep(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		tokenIn(overrides?: CallOverrides): Promise<BigNumber>;

		tokenInLimit(overrides?: CallOverrides): Promise<BigNumber>;

		tokenOut(overrides?: CallOverrides): Promise<BigNumber>;

		tokenOutPrice(overrides?: CallOverrides): Promise<BigNumber>;

		totalTokenIn(overrides?: CallOverrides): Promise<BigNumber>;

		totalTokenOutBought(overrides?: CallOverrides): Promise<BigNumber>;

		totalTokenOutClaimed(overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;
	};

	populateTransaction: {
		boughtAmounts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		buy(
			_tokenInAmount: BigNumberish,
			_daoId: BigNumberish,
			_proof: BytesLike[],
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		daoCommitments(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getAmountOut(_tokenInAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getTokenInLimitLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		guestlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		hasClaimed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		initialize(
			_tokenOut: string,
			_tokenIn: string,
			_saleStart: BigNumberish,
			_saleDuration: BigNumberish,
			_tokenOutPrice: BigNumberish,
			_saleRecipient: string,
			_guestlist: string,
			_tokenInLimit: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		saleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		saleEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		saleRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		saleStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		setGuestlist(
			_guestlist: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setSaleDuration(
			_saleDuration: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setSaleRecipient(
			_saleRecipient: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setSaleStart(
			_saleStart: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setTokenInLimit(
			_tokenInLimit: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		setTokenOutPrice(
			_tokenOutPrice: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		sweep(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		tokenIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenInLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		tokenOutPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalTokenIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalTokenOutBought(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalTokenOutClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;
	};
}
