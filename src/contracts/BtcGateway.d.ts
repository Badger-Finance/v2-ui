/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface BtcGatewayInterface extends ethers.utils.Interface {
	functions: {
		'_directTransferOwnership(address)': FunctionFragment;
		'_legacy_hashForSignature(bytes32,uint256,address,bytes32)': FunctionFragment;
		'blacklistRecoverableToken(address)': FunctionFragment;
		'burn(bytes,uint256)': FunctionFragment;
		'burnFee()': FunctionFragment;
		'claimOwnership()': FunctionFragment;
		'claimTokenOwnership()': FunctionFragment;
		'feeRecipient()': FunctionFragment;
		'getBurn(uint256)': FunctionFragment;
		'hashForSignature(bytes32,uint256,address,bytes32)': FunctionFragment;
		'initialize(address,address,address,uint16,uint16,uint256)': FunctionFragment;
		'isOwner()': FunctionFragment;
		'minimumBurnAmount()': FunctionFragment;
		'mint(bytes32,uint256,bytes32,bytes)': FunctionFragment;
		'mintAuthority()': FunctionFragment;
		'mintFee()': FunctionFragment;
		'nextN()': FunctionFragment;
		'owner()': FunctionFragment;
		'pendingOwner()': FunctionFragment;
		'recoverTokens(address)': FunctionFragment;
		'renounceOwnership()': FunctionFragment;
		'selectorHash()': FunctionFragment;
		'status(bytes32)': FunctionFragment;
		'token()': FunctionFragment;
		'transferOwnership(address)': FunctionFragment;
		'transferTokenOwnership(address)': FunctionFragment;
		'updateBurnFee(uint16)': FunctionFragment;
		'updateFeeRecipient(address)': FunctionFragment;
		'updateFees(uint16,uint16)': FunctionFragment;
		'updateMinimumBurnAmount(uint256)': FunctionFragment;
		'updateMintAuthority(address)': FunctionFragment;
		'updateMintFee(uint16)': FunctionFragment;
		'updateSelectorHash(bytes32)': FunctionFragment;
		'updateSymbol(string)': FunctionFragment;
		'verifySignature(bytes32,bytes)': FunctionFragment;
	};

	encodeFunctionData(functionFragment: '_directTransferOwnership', values: [string]): string;
	encodeFunctionData(
		functionFragment: '_legacy_hashForSignature',
		values: [BytesLike, BigNumberish, string, BytesLike],
	): string;
	encodeFunctionData(functionFragment: 'blacklistRecoverableToken', values: [string]): string;
	encodeFunctionData(functionFragment: 'burn', values: [BytesLike, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'burnFee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'claimOwnership', values?: undefined): string;
	encodeFunctionData(functionFragment: 'claimTokenOwnership', values?: undefined): string;
	encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
	encodeFunctionData(functionFragment: 'getBurn', values: [BigNumberish]): string;
	encodeFunctionData(
		functionFragment: 'hashForSignature',
		values: [BytesLike, BigNumberish, string, BytesLike],
	): string;
	encodeFunctionData(
		functionFragment: 'initialize',
		values: [string, string, string, BigNumberish, BigNumberish, BigNumberish],
	): string;
	encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'minimumBurnAmount', values?: undefined): string;
	encodeFunctionData(functionFragment: 'mint', values: [BytesLike, BigNumberish, BytesLike, BytesLike]): string;
	encodeFunctionData(functionFragment: 'mintAuthority', values?: undefined): string;
	encodeFunctionData(functionFragment: 'mintFee', values?: undefined): string;
	encodeFunctionData(functionFragment: 'nextN', values?: undefined): string;
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
	encodeFunctionData(functionFragment: 'recoverTokens', values: [string]): string;
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
	encodeFunctionData(functionFragment: 'selectorHash', values?: undefined): string;
	encodeFunctionData(functionFragment: 'status', values: [BytesLike]): string;
	encodeFunctionData(functionFragment: 'token', values?: undefined): string;
	encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
	encodeFunctionData(functionFragment: 'transferTokenOwnership', values: [string]): string;
	encodeFunctionData(functionFragment: 'updateBurnFee', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'updateFeeRecipient', values: [string]): string;
	encodeFunctionData(functionFragment: 'updateFees', values: [BigNumberish, BigNumberish]): string;
	encodeFunctionData(functionFragment: 'updateMinimumBurnAmount', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'updateMintAuthority', values: [string]): string;
	encodeFunctionData(functionFragment: 'updateMintFee', values: [BigNumberish]): string;
	encodeFunctionData(functionFragment: 'updateSelectorHash', values: [BytesLike]): string;
	encodeFunctionData(functionFragment: 'updateSymbol', values: [string]): string;
	encodeFunctionData(functionFragment: 'verifySignature', values: [BytesLike, BytesLike]): string;

	decodeFunctionResult(functionFragment: '_directTransferOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: '_legacy_hashForSignature', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'blacklistRecoverableToken', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'burnFee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'claimOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'claimTokenOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'getBurn', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'hashForSignature', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'minimumBurnAmount', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'mintAuthority', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'mintFee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'nextN', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'recoverTokens', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'selectorHash', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'status', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'transferTokenOwnership', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateBurnFee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateFeeRecipient', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateFees', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateMinimumBurnAmount', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateMintAuthority', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateMintFee', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateSelectorHash', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'updateSymbol', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'verifySignature', data: BytesLike): Result;

	events: {
		'LogBurn(bytes,uint256,uint256,bytes)': EventFragment;
		'LogMint(address,uint256,uint256,bytes32)': EventFragment;
		'LogMintAuthorityUpdated(address)': EventFragment;
		'OwnershipTransferred(address,address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'LogBurn'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'LogMint'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'LogMintAuthorityUpdated'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type LogBurnEvent = TypedEvent<
	[string, BigNumber, BigNumber, string] & {
		_to: string;
		_amount: BigNumber;
		_n: BigNumber;
		_indexedTo: string;
	}
>;

export type LogMintEvent = TypedEvent<
	[string, BigNumber, BigNumber, string] & {
		_to: string;
		_amount: BigNumber;
		_n: BigNumber;
		_nHash: string;
	}
>;

export type LogMintAuthorityUpdatedEvent = TypedEvent<[string] & { _newMintAuthority: string }>;

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export class BtcGateway extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: BtcGatewayInterface;

	functions: {
		_directTransferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		_legacy_hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<[string]>;

		blacklistRecoverableToken(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		burn(
			_to: BytesLike,
			_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		burnFee(overrides?: CallOverrides): Promise<[number]>;

		claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		claimTokenOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		feeRecipient(overrides?: CallOverrides): Promise<[string]>;

		getBurn(
			_n: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, string, BigNumber, string, string] & {
				_blocknumber: BigNumber;
				_to: string;
				_amount: BigNumber;
				_chain: string;
				_payload: string;
			}
		>;

		hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<[string]>;

		'initialize(address,address,address,uint16,uint16,uint256)'(
			_token: string,
			_feeRecipient: string,
			_mintAuthority: string,
			_mintFee: BigNumberish,
			_burnFee: BigNumberish,
			_minimumBurnAmount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		'initialize(address)'(
			_nextOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		isOwner(overrides?: CallOverrides): Promise<[boolean]>;

		minimumBurnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

		mint(
			_pHash: BytesLike,
			_amountUnderlying: BigNumberish,
			_nHash: BytesLike,
			_sig: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		mintAuthority(overrides?: CallOverrides): Promise<[string]>;

		mintFee(overrides?: CallOverrides): Promise<[number]>;

		nextN(overrides?: CallOverrides): Promise<[BigNumber]>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		pendingOwner(overrides?: CallOverrides): Promise<[string]>;

		recoverTokens(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

		selectorHash(overrides?: CallOverrides): Promise<[string]>;

		status(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

		token(overrides?: CallOverrides): Promise<[string]>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		transferTokenOwnership(
			_nextTokenOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateBurnFee(
			_nextBurnFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateFeeRecipient(
			_nextFeeRecipient: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateFees(
			_nextMintFee: BigNumberish,
			_nextBurnFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateMinimumBurnAmount(
			_minimumBurnAmount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateMintAuthority(
			_nextMintAuthority: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateMintFee(
			_nextMintFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateSelectorHash(
			_selectorHash: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		updateSymbol(
			symbol: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		verifySignature(_sigHash: BytesLike, _sig: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
	};

	_directTransferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	_legacy_hashForSignature(
		_pHash: BytesLike,
		_amount: BigNumberish,
		_to: string,
		_nHash: BytesLike,
		overrides?: CallOverrides,
	): Promise<string>;

	blacklistRecoverableToken(
		_token: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	burn(
		_to: BytesLike,
		_amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	burnFee(overrides?: CallOverrides): Promise<number>;

	claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	claimTokenOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	feeRecipient(overrides?: CallOverrides): Promise<string>;

	getBurn(
		_n: BigNumberish,
		overrides?: CallOverrides,
	): Promise<
		[BigNumber, string, BigNumber, string, string] & {
			_blocknumber: BigNumber;
			_to: string;
			_amount: BigNumber;
			_chain: string;
			_payload: string;
		}
	>;

	hashForSignature(
		_pHash: BytesLike,
		_amount: BigNumberish,
		_to: string,
		_nHash: BytesLike,
		overrides?: CallOverrides,
	): Promise<string>;

	'initialize(address,address,address,uint16,uint16,uint256)'(
		_token: string,
		_feeRecipient: string,
		_mintAuthority: string,
		_mintFee: BigNumberish,
		_burnFee: BigNumberish,
		_minimumBurnAmount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	'initialize(address)'(
		_nextOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	isOwner(overrides?: CallOverrides): Promise<boolean>;

	minimumBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

	mint(
		_pHash: BytesLike,
		_amountUnderlying: BigNumberish,
		_nHash: BytesLike,
		_sig: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	mintAuthority(overrides?: CallOverrides): Promise<string>;

	mintFee(overrides?: CallOverrides): Promise<number>;

	nextN(overrides?: CallOverrides): Promise<BigNumber>;

	owner(overrides?: CallOverrides): Promise<string>;

	pendingOwner(overrides?: CallOverrides): Promise<string>;

	recoverTokens(
		_token: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

	selectorHash(overrides?: CallOverrides): Promise<string>;

	status(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

	token(overrides?: CallOverrides): Promise<string>;

	transferOwnership(
		newOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	transferTokenOwnership(
		_nextTokenOwner: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateBurnFee(
		_nextBurnFee: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateFeeRecipient(
		_nextFeeRecipient: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateFees(
		_nextMintFee: BigNumberish,
		_nextBurnFee: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateMinimumBurnAmount(
		_minimumBurnAmount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateMintAuthority(
		_nextMintAuthority: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateMintFee(
		_nextMintFee: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateSelectorHash(
		_selectorHash: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	updateSymbol(
		symbol: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	verifySignature(_sigHash: BytesLike, _sig: BytesLike, overrides?: CallOverrides): Promise<boolean>;

	callStatic: {
		_directTransferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

		_legacy_hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<string>;

		blacklistRecoverableToken(_token: string, overrides?: CallOverrides): Promise<void>;

		burn(_to: BytesLike, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		burnFee(overrides?: CallOverrides): Promise<number>;

		claimOwnership(overrides?: CallOverrides): Promise<void>;

		claimTokenOwnership(overrides?: CallOverrides): Promise<void>;

		feeRecipient(overrides?: CallOverrides): Promise<string>;

		getBurn(
			_n: BigNumberish,
			overrides?: CallOverrides,
		): Promise<
			[BigNumber, string, BigNumber, string, string] & {
				_blocknumber: BigNumber;
				_to: string;
				_amount: BigNumber;
				_chain: string;
				_payload: string;
			}
		>;

		hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<string>;

		'initialize(address,address,address,uint16,uint16,uint256)'(
			_token: string,
			_feeRecipient: string,
			_mintAuthority: string,
			_mintFee: BigNumberish,
			_burnFee: BigNumberish,
			_minimumBurnAmount: BigNumberish,
			overrides?: CallOverrides,
		): Promise<void>;

		'initialize(address)'(_nextOwner: string, overrides?: CallOverrides): Promise<void>;

		isOwner(overrides?: CallOverrides): Promise<boolean>;

		minimumBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

		mint(
			_pHash: BytesLike,
			_amountUnderlying: BigNumberish,
			_nHash: BytesLike,
			_sig: BytesLike,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		mintAuthority(overrides?: CallOverrides): Promise<string>;

		mintFee(overrides?: CallOverrides): Promise<number>;

		nextN(overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<string>;

		pendingOwner(overrides?: CallOverrides): Promise<string>;

		recoverTokens(_token: string, overrides?: CallOverrides): Promise<void>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		selectorHash(overrides?: CallOverrides): Promise<string>;

		status(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

		token(overrides?: CallOverrides): Promise<string>;

		transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

		transferTokenOwnership(_nextTokenOwner: string, overrides?: CallOverrides): Promise<void>;

		updateBurnFee(_nextBurnFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

		updateFeeRecipient(_nextFeeRecipient: string, overrides?: CallOverrides): Promise<void>;

		updateFees(_nextMintFee: BigNumberish, _nextBurnFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

		updateMinimumBurnAmount(_minimumBurnAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

		updateMintAuthority(_nextMintAuthority: string, overrides?: CallOverrides): Promise<void>;

		updateMintFee(_nextMintFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

		updateSelectorHash(_selectorHash: BytesLike, overrides?: CallOverrides): Promise<void>;

		updateSymbol(symbol: string, overrides?: CallOverrides): Promise<void>;

		verifySignature(_sigHash: BytesLike, _sig: BytesLike, overrides?: CallOverrides): Promise<boolean>;
	};

	filters: {
		'LogBurn(bytes,uint256,uint256,bytes)'(
			_to?: null,
			_amount?: null,
			_n?: BigNumberish | null,
			_indexedTo?: BytesLike | null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber, string],
			{ _to: string; _amount: BigNumber; _n: BigNumber; _indexedTo: string }
		>;

		LogBurn(
			_to?: null,
			_amount?: null,
			_n?: BigNumberish | null,
			_indexedTo?: BytesLike | null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber, string],
			{ _to: string; _amount: BigNumber; _n: BigNumber; _indexedTo: string }
		>;

		'LogMint(address,uint256,uint256,bytes32)'(
			_to?: string | null,
			_amount?: null,
			_n?: BigNumberish | null,
			_nHash?: BytesLike | null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber, string],
			{ _to: string; _amount: BigNumber; _n: BigNumber; _nHash: string }
		>;

		LogMint(
			_to?: string | null,
			_amount?: null,
			_n?: BigNumberish | null,
			_nHash?: BytesLike | null,
		): TypedEventFilter<
			[string, BigNumber, BigNumber, string],
			{ _to: string; _amount: BigNumber; _n: BigNumber; _nHash: string }
		>;

		'LogMintAuthorityUpdated(address)'(
			_newMintAuthority?: string | null,
		): TypedEventFilter<[string], { _newMintAuthority: string }>;

		LogMintAuthorityUpdated(
			_newMintAuthority?: string | null,
		): TypedEventFilter<[string], { _newMintAuthority: string }>;

		'OwnershipTransferred(address,address)'(
			previousOwner?: string | null,
			newOwner?: string | null,
		): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

		OwnershipTransferred(
			previousOwner?: string | null,
			newOwner?: string | null,
		): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;
	};

	estimateGas: {
		_directTransferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		_legacy_hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		blacklistRecoverableToken(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		burn(
			_to: BytesLike,
			_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		burnFee(overrides?: CallOverrides): Promise<BigNumber>;

		claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		claimTokenOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

		getBurn(_n: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

		hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		'initialize(address,address,address,uint16,uint16,uint256)'(
			_token: string,
			_feeRecipient: string,
			_mintAuthority: string,
			_mintFee: BigNumberish,
			_burnFee: BigNumberish,
			_minimumBurnAmount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		'initialize(address)'(
			_nextOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		isOwner(overrides?: CallOverrides): Promise<BigNumber>;

		minimumBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

		mint(
			_pHash: BytesLike,
			_amountUnderlying: BigNumberish,
			_nHash: BytesLike,
			_sig: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		mintAuthority(overrides?: CallOverrides): Promise<BigNumber>;

		mintFee(overrides?: CallOverrides): Promise<BigNumber>;

		nextN(overrides?: CallOverrides): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

		recoverTokens(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		selectorHash(overrides?: CallOverrides): Promise<BigNumber>;

		status(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		token(overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		transferTokenOwnership(
			_nextTokenOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateBurnFee(
			_nextBurnFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateFeeRecipient(
			_nextFeeRecipient: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateFees(
			_nextMintFee: BigNumberish,
			_nextBurnFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateMinimumBurnAmount(
			_minimumBurnAmount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateMintAuthority(
			_nextMintAuthority: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateMintFee(
			_nextMintFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateSelectorHash(
			_selectorHash: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;

		updateSymbol(symbol: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		verifySignature(_sigHash: BytesLike, _sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		_directTransferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		_legacy_hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		blacklistRecoverableToken(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		burn(
			_to: BytesLike,
			_amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		claimTokenOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		getBurn(_n: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		hashForSignature(
			_pHash: BytesLike,
			_amount: BigNumberish,
			_to: string,
			_nHash: BytesLike,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		'initialize(address,address,address,uint16,uint16,uint256)'(
			_token: string,
			_feeRecipient: string,
			_mintAuthority: string,
			_mintFee: BigNumberish,
			_burnFee: BigNumberish,
			_minimumBurnAmount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		'initialize(address)'(
			_nextOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		minimumBurnAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		mint(
			_pHash: BytesLike,
			_amountUnderlying: BigNumberish,
			_nHash: BytesLike,
			_sig: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		mintAuthority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		mintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		nextN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		recoverTokens(
			_token: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

		selectorHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		status(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		transferTokenOwnership(
			_nextTokenOwner: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateBurnFee(
			_nextBurnFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateFeeRecipient(
			_nextFeeRecipient: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateFees(
			_nextMintFee: BigNumberish,
			_nextBurnFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateMinimumBurnAmount(
			_minimumBurnAmount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateMintAuthority(
			_nextMintAuthority: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateMintFee(
			_nextMintFee: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateSelectorHash(
			_selectorHash: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		updateSymbol(
			symbol: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		verifySignature(_sigHash: BytesLike, _sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
	};
}
