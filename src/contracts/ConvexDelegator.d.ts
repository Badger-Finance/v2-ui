/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ConvexDelegatorInterface extends ethers.utils.Interface {
	functions: {
		'clearDelegate(bytes32)': FunctionFragment;
		'delegation(address,bytes32)': FunctionFragment;
		'setDelegate(bytes32,address)': FunctionFragment;
	};

	encodeFunctionData(functionFragment: 'clearDelegate', values: [BytesLike]): string;
	encodeFunctionData(functionFragment: 'delegation', values: [string, BytesLike]): string;
	encodeFunctionData(functionFragment: 'setDelegate', values: [BytesLike, string]): string;

	decodeFunctionResult(functionFragment: 'clearDelegate', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'delegation', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'setDelegate', data: BytesLike): Result;

	events: {
		'ClearDelegate(address,bytes32,address)': EventFragment;
		'SetDelegate(address,bytes32,address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'ClearDelegate'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'SetDelegate'): EventFragment;
}

export type ClearDelegateEvent = TypedEvent<
	[string, string, string] & { delegator: string; id: string; delegate: string }
>;

export type SetDelegateEvent = TypedEvent<
	[string, string, string] & { delegator: string; id: string; delegate: string }
>;

export class ConvexDelegator extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>,
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: ConvexDelegatorInterface;

	functions: {
		clearDelegate(
			id: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;

		delegation(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<[string]>;

		setDelegate(
			id: BytesLike,
			delegate: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<ContractTransaction>;
	};

	clearDelegate(
		id: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	delegation(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<string>;

	setDelegate(
		id: BytesLike,
		delegate: string,
		overrides?: Overrides & { from?: string | Promise<string> },
	): Promise<ContractTransaction>;

	callStatic: {
		clearDelegate(id: BytesLike, overrides?: CallOverrides): Promise<void>;

		delegation(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<string>;

		setDelegate(id: BytesLike, delegate: string, overrides?: CallOverrides): Promise<void>;
	};

	filters: {
		'ClearDelegate(address,bytes32,address)'(
			delegator?: string | null,
			id?: BytesLike | null,
			delegate?: string | null,
		): TypedEventFilter<[string, string, string], { delegator: string; id: string; delegate: string }>;

		ClearDelegate(
			delegator?: string | null,
			id?: BytesLike | null,
			delegate?: string | null,
		): TypedEventFilter<[string, string, string], { delegator: string; id: string; delegate: string }>;

		'SetDelegate(address,bytes32,address)'(
			delegator?: string | null,
			id?: BytesLike | null,
			delegate?: string | null,
		): TypedEventFilter<[string, string, string], { delegator: string; id: string; delegate: string }>;

		SetDelegate(
			delegator?: string | null,
			id?: BytesLike | null,
			delegate?: string | null,
		): TypedEventFilter<[string, string, string], { delegator: string; id: string; delegate: string }>;
	};

	estimateGas: {
		clearDelegate(id: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

		delegation(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

		setDelegate(
			id: BytesLike,
			delegate: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<BigNumber>;
	};

	populateTransaction: {
		clearDelegate(
			id: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;

		delegation(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

		setDelegate(
			id: BytesLike,
			delegate: string,
			overrides?: Overrides & { from?: string | Promise<string> },
		): Promise<PopulatedTransaction>;
	};
}
